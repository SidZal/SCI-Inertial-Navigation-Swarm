%% Clear cache
clear;clc;close all

%% Library
import casadi.*
rng(10)

%% Physical parameters
r = 0.025; 
d = 0.05; 

%% MPC parameters
T = 0.1; % Sampling time [s]
N = 20; % Prediction horizon

wL_max = 10;
wL_min = -wL_max;
wR_max = 10;
wR_min = -wR_max;

%% MPC definition
x = SX.sym('x');
y = SX.sym('y');
theta = SX.sym('theta');

states = [x;y;theta];
n_states = length(states);
wL = SX.sym('wL');
wR = SX.sym('wR');

controls = [wL;wR];
n_controls = length(controls);
rhs = [r*(wL+wR)*cos(theta);
       r*(wL+wR)*sin(theta);
       r/d*(wR-wL)];

f = Function('f', {states,controls}, {rhs}); % Nonlinear mapping function f(x,u)
U = SX.sym('U', n_controls, N); % Decesion variables (controls)
P = SX.sym('P', n_states + n_states);
X = SX.sym('X', n_states, N+1);

% Compute solution symbolically
X(:,1) = P(1:3); % Initial state
for k = 1:N
    st_old = X(:,k);
    con_old = U(:,k);
    f_value = f(st_old,con_old);
    st_new = st_old + T*f_value;
    X(:,k+1) = st_new;
end

ff = Function('ff', {U,P}, {X});

obj = 0; % Objective function

Q = diag([1,1,1]);
R = diag([0,0]);

% Compute objective
for k = 1:N
    st = X(:,k);
    con = U(:,k);
    obj = obj+(st-P(4:6))'*Q*(st-P(4:6))+con'*R*con;
end

% Make the decesion variables one column vector
OPT_variables = reshape(U, 2*N, 1);
nlp_prob = struct('f', obj, 'x', OPT_variables, 'p', P);

opts = struct;
opts.ipopt.max_iter = 100;
opts.ipopt.print_level = 0;
opts.print_time = 0;
opts.ipopt.acceptable_tol = 1e-8;
opts.ipopt.acceptable_obj_change_tol = 1e-6;

solver = nlpsol('solver', 'ipopt', nlp_prob, opts);

% Input constraints
args = struct;
args.lbx(1:2:2*N,1) = wL_min;
args.lbx(2:2:2*N,1) = wR_min;
args.ubx(1:2:2*N,1) = wL_max;
args.ubx(2:2:2*N,1) = wR_max;

% Simulation loop
t0 = 0;
quat_goal = eul2quat([pi/4 pi/4 0]);
x0 = [0;0;0;0.7;0;0.7;0]; % Initial condition
xs = [0 0 0 quat_goal]'; % Reference posture
xx(:,1) = x0; % State history
t(1) = t0;
u0 = zeros(N,6); % Control inputs
sim_tim = 10; % Maximum simulation time

% Start MPC
mpciter = 0;
xx1 = [];
u_c1 = [];

tic
while mpciter < sim_tim/T
%     quat_goal = eul2quat([0 pi/2*sin(0.05*mpciter) 0]);
%     quat_goal = eul2quat([pi/2*cos(0.05*mpciter) 0 0]);
    quat_goal = eul2quat([pi/4 pi/4 0]); 
    xs = [0 0 0 quat_goal]';
    args.p = [x0;xs];
    args.x0 = reshape(u0',6*N,1);
    sol = solver('x0',args.x0,'lbx',args.lbx,'ubx',args.ubx,'p',args.p);
    u = reshape(full(sol.x)', 6, N)';

    ff_values = ff(u',args.p);
    xx1(:,1:7,mpciter+1) = full(ff_values');
    u_c1 = [u_c1; u(1,:)];
    t(mpciter+1) = t0;
    [t0, x0, u0] = shift(T, t0, x0, u, f);
    xx(:,mpciter+2) = x0;
    mpciter = mpciter + 1;
end
toc

eul = quat2eul( xx(4:7,:)' );

%% Visulization
figure(1)
subplot(2,1,1)
plot([0,t]',eul/pi*180, 'LineWidth',3)
xlabel('Time, t [sec]')
ylabel('Euler angle [deg]')
subplot(2,1,2)
hold on
plot(t',u_c1(:,1),'r','LineWidth',2)
plot(t',u_c1(:,4),'r--','LineWidth',2)
plot(t',u_c1(:,2),'b','LineWidth',2)
plot(t',u_c1(:,5),'b--','LineWidth',2)
plot(t',u_c1(:,3),'k','LineWidth',2)
plot(t',u_c1(:,6),'k--','LineWidth',2)
xlabel('Time, t [sec]')
ylabel('Force [Nm]')
legend('F1x','F2x','F1y','F2y','F1z','F2z')
ylim([-wL_max,wL_max])

for i = 1:length(t)
    quat = xx(4:7,i)';
    eul = quat2eul(quat);
    pitch(i) = eul(2);
    rotm = quat2rotm(quat);
    Tf = se3(rotm);
    figure(2)
    plotTransforms(Tf,FrameAxisLabels="on", FrameSize=0.05)
    xlim([-0.1 0.1])
    ylim([-0.1 0.1])
    zlim([-0.1 0.1])
    xlabel('x')
    ylabel('y')
    zlabel('z')
    drawnow
end

function [t0, x0, u0] = shift(T, t0, x0, u, f)
st = x0;
con = u(1,:)';
f_value = f(st,con);
st = st + T*f_value;
x0 = full(st);
t0 = t0 + T;
u0 = [u(2:size(u,1),:);
      u(size(u,1),:)];
end
